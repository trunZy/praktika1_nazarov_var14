format binary as 'img'   ;изначальное преобразование файла .bin из flat assembler в .img после компиляции кода

org 0x7C00     ;установка начального адреса программы в памяти компьютера

jmp start       ;Переход к метке "start"


msg db "Var14", 0
msg1 db "Nazarov", 0
msg2 db "Mikhail", 0
msg3 db "Evgenievich", 0
msg4 db "NMT-313901", 0         
;Определение строковых переменных `msg`, `msg1`, `msg2`, `msg3`, `msg4`(Вариант, ФИО, группа) и их инициализация


start:
    cli                 ;Отключить прерывания
    mov ax, 0           ;Инициализация сегмента стека
    mov ss, ax
    mov sp, 0xFFFF      ;Установка указателя стека на верх
    sti                 ;Включить прерывания
;Настройка стека: отключает прерывания, инициализирует сегмент стека, устанавливает указатель стека на верхнюю границу и включает прерывания

    mov ax, 0x13        ; Переключение в режим 320x200 256-цвета
    int 0x10
    mov ax, 0x0010      ; Установка графического режима текста
    int 0x10            
;Переключает видеорежим на 320x200 пикселей с 256 цветами и устанавливает графический режим текста


push 320        ; X0
push 175        ; Y0
push 140        ; RX (большая ось)
push 70         ; RY (малая ось)
push 7          ; Цвет линии для овала
call DrawEllipse ; Вызов функции DrawEllipse
;Помещает параметры функции `DrawEllipse` в стек и вызывает эту функцию, эллипс рисуется в 640х350

; Установка цвета фона
    mov ah, 0x0B        ; Функция для установки цвета фона
    mov bl, 0x01        ; Синий цвет фона
    int 0x10

;Вывод текста по порядку на экран(вариант + Ф + И + О + группа)
    mov ah, 0x13        ; Функция для вывода текста
    mov al, 0           
    mov bh, 0           ; Страница экрана
    mov bl, 0x0C        ; Цвет текста: красный
    mov dl, 34          ;Колонка
    mov dh, 10          ;Строка
    push cs
    pop es
    mov bp, msg         ;выбор, какой именно текст
    mov cx, 5           ;Длина текста
    int 0x10

    mov ah, 0x13        
    mov al, 0           
    mov bh, 0           
    mov bl, 0x0C          
    mov dl, 34          
    mov dh, 11          
    push cs
    pop es
    mov bp, msg1
    mov cx, 7           
    int 0x10

    mov ah, 0x13        
    mov al, 0           
    mov bh, 0           
    mov bl, 0x0C        
    mov dl, 34          
    mov dh, 12          
    push cs
    pop es
    mov bp, msg2
    mov cx, 7          
    int 0x10

    mov ah, 0x13        
    mov al, 0           
    mov bh, 0           
    mov bl, 0x0C          
    mov dl, 34          
    mov dh, 13          
    push cs
    pop es
    mov bp, msg3
    mov cx, 11          
    int 0x10

    mov ah, 0x13        
    mov al, 0           
    mov bh, 0           
    mov bl, 0x0C        
    mov dl, 34          
    mov dh, 14          
    push cs
    pop es
    mov bp, msg4
    mov cx, 10          
    int 0x10


hang:
    jmp hang
;Бесконечный цикл, чтобы программа не завершалась

; Функция DrawEllipse
DrawEllipse:
push bp
mov bp, sp
sub sp, 2         ; Выделение места для локальной переменной
;Начало функции DrawEllipse. Сохранение значения регистра базы стека (BP) на стеке и установка значения регистра базы стека равным значению указателя стека (SP). Выделение 2 байтов памяти для локальной переменной

fld1             ; Загрузка 1.0 на вершину стека FPU
fadd st, st       ; Умножение на 2 для получения 2.0
fadd st, st
fimul word [bp+8] ; Умножение на RX (большую ось)
fldpi             ; Загрузка числа пи на вершину стека FPU
fdivrp            ; Деление на 4*RX для получения da (приращение угла)
;Вычисление значения приращения угла (da) для рисования эллипса. Загрузка значения 1.0 на вершину стека FPU, умножение на 2 дважды, умножение на RX (большую ось), загрузка значения числа пи на вершину стека FPU и деление на 4*RX

fldz             ; Загрузка 0.0 на вершину стека FPU

mov cx, [bp+8]    ; CX = RX
shl cx, 3         ; Умножение на 8 для получения 8*RX
xor bh, bh        ; BH = 0 (видео страница)
mov ax, [bp+4]    ; AX = AH
mov ah, 0ch       ; AH = цвет пикселя
;Установка значения регистра CX равным RX, умножение CX на 8 для получения 8*RX, установка значения регистра BH в 0 (видео страница), загрузка значения AH в регистр AX и установка значения регистра AH равным 0Ch (цвет пикселя)

@@: push cx          ; Сохранение CX (счетчика цикла)
    fld st           ; Дублирование вершины стека FPU (угла)
    fsincos             ; Вычисление синуса и косинуса угла
    fimul word [bp+8]   ; Умножение на RX (большую ось) для получения X
    fistp word [bp-2]   ; Сохранение X в локальной переменной
    mov cx, [bp-2]      ; CX = X
    add cx, [bp+12]     ; Добавление X0 для получения окончательной координаты X
    fimul word [bp+6]   ; Умножение на RY (малую ось) для получения Y
    fistp word [bp-2]   ; Сохранение Y в локальной переменной
    mov dx, [bp-2]      ; DX = Y
    add dx, [bp+10]     ; Добавление Y0 для получения окончательной координаты Y
    int 10h             
    fadd st, st1        ; Добавление da (приращение угла) к углу
    pop cx              ; Восстановление CX (счетчика цикла)
    loop @b             ; Цикл до тех пор, пока CX не станет нулем
;Цикл, который рисует эллипс на экране. Сохранение значения регистра CX на стеке, дублирование вершины стека FPU (угла), вычисление синуса и косинуса угла, умножение на RX для получения координаты X, сохранение X в локальной переменной, установка значения регистра CX равным X, добавление X0 для получения окончательной координаты X, умножение на RY для получения координаты Y, сохранение Y в локальной переменной, установка значения регистра DX равным Y, добавление Y0 для получения окончательной координаты Y, вызов прерывания видео BIOS для отрисовки пикселя, добавление приращения угла к углу, восстановление значения регистра CX со стека и выполнение цикла до тех пор, пока значение регистра CX не станет нулем

mov sp, bp      
pop bp
ret 10
;Восстановление значения регистра стека (SP) из регистра базы стека (BP), восстановление значения регистра базы стека (BP) со стека и возврат из функции с удалением 10 байтов из стека

; Заполнение оставшихся байт загрузочного сектора нулями
times 510-($-$$) db 0
; Подпись загрузчика
dw 0xAA55